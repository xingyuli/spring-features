<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--
    ***************************************************************************

        Spring 2.5 also added support for JSR-250 annotations such as
        @PostConstruct, and @PreDestroy.

        Spring 3.0 added support for JSR-330 (Dependency Injection for Java)
        annotations contained in the javax.inject package such as @Inject and
        @Named.

        NOTE:
        Annotation injection is performed before XML injection, thus the
        latter configuration will override the former for properties wired
        through both approaches.

    ***************************************************************************
    -->

    <!--
        Are annotations better than XML for configuring Spring?

        The introduction of annotation-based configurations raised the question
        of whether this approach is better than XML. The short answer is it
        depends. The long answer is that each approach has its pros and cons,
        and usually it is up to the developer to decide which strategy suits
        them better. Due to the way they are defined, annotations provide a lot
        of context in their declaration, leading to shorter and more concise
        configuration. However, XML excels at wiring up components without
        touching their source code or recompiling them. Some developers prefer
        having the wiring close to the source while others argue that annotated
        classes are no longer POJOs and, furthermore, that the configuration
        becomes decentralized and harder to control.
    -->

    <!--
        The implicitly registered post-processors include:
            AutowiredAnnotationBeanPostProcessor
            CommonAnnotationBeanPostProcessor
            PersistenceAnnotationBeanPostProcessor
            RequiredAnnotationBeanPostProcessor
    -->
    <context:annotation-config/>

    <!--
        For a fallback match, the bean name is considered a default qualifier
        value. Thus you can define the bean with an id instead of the nested
        qualifier element, leading to the same matching result.

        However, although you can use this convention to refer to specific
        beans by name, @Autowired is fundamentally about type-driven injection
        with optional semantic qualifiers. This means that qualifier values,
        even with the bean name fallback, always have narrowing semantics
        within the set of type matches; they do not semantically express a
        reference to a unique bean id.

        Qualifiers also apply to typed collections. All matching beans
        according to the declared qualifiers are injected as collection. This
        implies that qualifiers do not have to be unique; they rather simply
        constitute filtering criteria.
    -->

    <bean id="vehicle" class="org.swordess.toy.spring.annotationbased.model.Vehicle">
        <property name="brand" value="Volvo"/>
    </bean>

    <bean class="org.swordess.toy.spring.annotationbased.model.Vehicle">
        <qualifier value="crashed"/>
        <property name="brand" value="Audi"/>
    </bean>

    <bean class="org.swordess.toy.spring.annotationbased.model.Vehicle">
        <qualifier value="normal"/>
        <property name="brand" value="Normal A"/>
    </bean>
    <bean class="org.swordess.toy.spring.annotationbased.model.Vehicle">
        <qualifier value="normal"/>
        <property name="brand" value="Normal B"/>
    </bean>
    <bean class="org.swordess.toy.spring.annotationbased.model.Vehicle">
        <qualifier value="normal"/>
        <property name="brand" value="Normal C"/>
    </bean>

    <bean id="usingQualifierOnField"
          class="org.swordess.toy.spring.annotationbased.qualifier.QualifierAnnotationOnField"/>

    <bean id="usingQualifierOnArgument"
          class="org.swordess.toy.spring.annotationbased.qualifier.QualifierAnnotationOnArgument"/>

    <!--
    ***************************************************************************

        TIP:
        If you intend to express annotation-driven injection by name, do not
        primarily use @Autowired, even if is technically capable of referring
        to a bean name through @Qualifier values. Instead, use the JSR-250
        @Resource annotation, which is semantically defined to identify a
        specific target component by its unique name, with the declared type
        being irrelevant for the matching process.

        As a specific consequence of this semantic difference, beans that are
        themselves defined as a collection or map type cannot be injected
        through @Autowired, because type matching is not properly applicable to
        them. Use @Resource for such beans, referring to the specific
        collection or map bean by unique name.

    ***************************************************************************
    -->

</beans>